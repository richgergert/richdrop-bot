from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import os
import requests
import asyncio
import aioschedule
from datetime import datetime

bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher(bot)

EXCHANGE_RATE = 13.2
user_state = {}
last_result = {}

# üîÅ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞
def fetch_exchange_rate():
    global EXCHANGE_RATE
    try:
        url = "https://www.cbr-xml-daily.ru/daily_json.js"
        response = requests.get(url)
        data = response.json()
        EXCHANGE_RATE = round(data["Valute"]["CNY"]["Value"], 2)
        print(f"[{datetime.now()}] ‚úÖ –ö—É—Ä—Å –æ–±–Ω–æ–≤–ª—ë–Ω: {EXCHANGE_RATE}")
    except Exception as e:
        print(f"[{datetime.now()}] ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞: {e}")

async def scheduler():
    aioschedule.every(12).hours.do(fetch_exchange_rate)
    while True:
        await aioschedule.run_pending()
        await asyncio.sleep(60)

# üì≤ –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_menu():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(
        KeyboardButton("üí∞ –†–ê–°–°–ß–ò–¢–ê–¢–¨ –ó–ê–ö–ê–ó"),
        KeyboardButton("üí∏ –ê–ö–¢–£–ê–õ–¨–ù–´–ô –ö–£–†–°"),
        KeyboardButton("üì¶ –ö–ê–ö –û–§–û–†–ú–ò–¢–¨?")
    )
    return kb

def category_menu():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(
        KeyboardButton("üëï –û–¥–µ–∂–¥–∞"),
        KeyboardButton("üëü –û–±—É–≤—å"),
        KeyboardButton("üì¶ –î—Ä—É–≥–æ–µ")
    )
    return kb

def back_menu():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üîô –ì–ª–∞–≤–Ω–∞—è"))
    return kb

def manager_menu():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üì© –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"))
    kb.add(KeyboardButton("üîô –ì–ª–∞–≤–Ω–∞—è"))
    return kb

# ‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç
@dp.message_handler(commands=["start"])
async def start_handler(message: types.Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∑–∞–∫–∞–∑–∞ —Å Poizon!\n\n"
        "–ù–∞–∂–º–∏—Ç–µ <b>–†–ê–°–°–ß–ò–¢–ê–¢–¨ –ó–ê–ö–ê–ó</b> –∏ —É–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ —é–∞–Ω—è—Ö (¬•).",
        parse_mode="HTML",
        reply_markup=main_menu()
    )

# üí∞ –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.message_handler(lambda msg: msg.text == "üí∞ –†–ê–°–°–ß–ò–¢–ê–¢–¨ –ó–ê–ö–ê–ó")
async def ask_category(message: types.Message):
    user_state[message.from_user.id] = "awaiting_category"
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:", reply_markup=category_menu())

# ‚úÖ –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.message_handler(lambda msg: msg.text in ["üëï –û–¥–µ–∂–¥–∞", "üëü –û–±—É–≤—å", "üì¶ –î—Ä—É–≥–æ–µ"])
async def after_category_selected(message: types.Message):
    user_state[message.from_user.id] = "awaiting_price"
    await message.answer(
        '–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è "POIZON" –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 800)',
        reply_markup=back_menu()
    )

# üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
@dp.message_handler(lambda msg: msg.text == "üîô –ì–ª–∞–≤–Ω–∞—è")
async def back_home(message: types.Message):
    user_state.pop(message.from_user.id, None)
    await start_handler(message)

# üì© –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
@dp.message_handler(lambda msg: msg.text == "üì© –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º")
async def contact_manager(message: types.Message):
    await message.answer("–°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: @richgergert")

# üí∏ –ü–æ–∫–∞–∑–∞—Ç—å –∫—É—Ä—Å
@dp.message_handler(lambda msg: msg.text == "üí∏ –ê–ö–¢–£–ê–õ–¨–ù–´–ô –ö–£–†–°")
async def show_rate(message: types.Message):
    fetch_exchange_rate()
    await message.answer(f"üí± –ö—É—Ä—Å –æ–±–Ω–æ–≤–ª—ë–Ω!\n<b>1 ¬• = {EXCHANGE_RATE}‚ÇΩ</b>", parse_mode="HTML")

# üì¶ –ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å
@dp.message_handler(lambda msg: msg.text == "üì¶ –ö–ê–ö –û–§–û–†–ú–ò–¢–¨?")
async def how_to_order(message: types.Message):
    await message.answer("–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É ‚Äî @richgergert")

# üìâ –°–∫–∏–¥–∫–∏
@dp.message_handler(lambda msg: msg.text.startswith("üìâ –°–ö–ò–î–ö–ê"))
async def handle_discount(message: types.Message):
    user_id = message.from_user.id
    if user_id not in last_result:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π —Ä–∞—Å—á—ë—Ç.", reply_markup=main_menu())
        return

    discount_percent = float(message.text.replace("üìâ –°–ö–ò–î–ö–ê", "").replace("%", "").strip())
    original = last_result[user_id]
    discounted = round(original * (1 - discount_percent / 100), 2)

    await message.answer(f"üí∏ –ò—Ç–æ–≥ —Å–æ —Å–∫–∏–¥–∫–æ–π {discount_percent}%: <b>{discounted}‚ÇΩ</b>", parse_mode="HTML", reply_markup=main_menu())

# üí¨ –†–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ (–∫–∞–∫ —É –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞)
@dp.message_handler(lambda msg: user_state.get(msg.from_user.id) == "awaiting_price")
async def calculate_price(message: types.Message):
    try:
        price_yuan = float(message.text.replace(",", "."))
        exchange = EXCHANGE_RATE

        rub_price = round(price_yuan * exchange, 2)
        poizon_delivery = 316
        china_russia = 400
        insurance = round(rub_price * 0.03, 2)
        service_fee = 500
        total = round(rub_price + poizon_delivery + china_russia + insurance + service_fee, 2)

        last_result[message.from_user.id] = total
        user_state.pop(message.from_user.id, None)

        await message.answer(
            f"–°–¥–µ–ª–∞–ª —Ä–∞—Å—á–µ—Ç –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞:\n\n"
            f"<b>–ò—Ç–æ–≥–æ: —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ {total}‚ÇΩ</b>\n\n"
            f"<u>–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞:</u>\n"
            f"- –¢–æ–≤–∞—Ä: {rub_price}‚ÇΩ\n"
            f"- –î–æ—Å—Ç–∞–≤–∫–∞ –æ—Ç Poizon: {poizon_delivery}‚ÇΩ\n"
            f"- –î–æ—Å—Ç–∞–≤–∫–∞ üá®üá≥ –ö–∏—Ç–∞–π ‚Äì üá∑üá∫ –†–æ—Å—Å–∏—è: {china_russia}‚ÇΩ\n"
            f"- –°—Ç—Ä–∞—Ö–æ–≤–∫–∞ (3% –æ—Ç —Ü–µ–Ω—ã): {insurance}‚ÇΩ\n"
            f"- –ö–æ–º–∏—Å—Å–∏—è —Å–µ—Ä–≤–∏—Å–∞: {service_fee}‚ÇΩ\n\n"
            f"–ß—Ç–æ–±—ã –∑–∞–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É ‚Äì @richgergert",
            parse_mode="HTML",
            reply_markup=manager_menu()
        )
    except ValueError:
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —á–∏—Å–ª–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä: 800")

# ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    fetch_exchange_rate()
    loop = asyncio.get_event_loop()
    loop.create_task(scheduler())
    executor.start_polling(dp, skip_updates=True)
